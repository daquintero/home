# Some of this was taken from Floris Port

## Logging
#-------------------------------------------------------------------------------

mkdir -p $HOME/.local/share
LOG="$HOME/.local/share/debian_install.log"
ERR="$HOME/.local/share/debian_install_errors.log"
printf "DEBIAN PACKAGE INSTALL\n\n\n" > $LOG
printf "DEBIAN PACKAGE INSTALL\n\n\n" > $ERR


## User input
#-------------------------------------------------------------------------------

# Ask for password, this will be used for all the sudo calls.:
# and to change the shell later on.
read -s -p "[sudo] password for $USER: " password
echo $password | sudo -S echo '' 2>/dev/null
if [ $? -ne 0 ]; then
    printf "\nIncorrect sudo password. Script ended prematurely.\n\nPlease start over.\n\n"
    exit 1
fi


## Update
#-------------------------------------------------------------------------------

## Update arch
printf "\n\nUpdating...\n\n"
printf "\n\nUpdating...\n\n" >> $LOG
printf "\n\nUpdating...\n\n" >> $ERR
echo $password | sudo -S apt update -y >> $LOG 2>> $ERR
echo $password | sudo -S apt upgrade -y >> $LOG 2>> $ERR


## Custom installation functions
#-------------------------------------------------------------------------------

echo_success(){
    if [ $1 -ne 0 ]; then
        printf "failed!\n"
        printf "\nfailed!\n" >> $LOG
        printf "\nfailed!\n" >> $ERR
        return 1
    fi

    printf "success!\n"
    printf "\nsuccess!\n" >> $LOG
    printf "\nsuccess!\n" >> $ERR
    return 0
}

apt_install(){ # will only install the first argument!
    printf "installing $1... "
    printf "\n\n\ninstalling $1...\n" >> $LOG
    printf "\n\n\ninstalling $1...\n" >> $ERR

    # check if package is already installed...
    dpkg -l $1 >> $LOG 2>> $ERR;
    if [ $? = 0 ] && [ "$FORCE" -eq 0 ]; then
        printf "already installed.\n"
        printf "already installed.\n" >> $LOG
        printf "already installed.\n" >> $ERR
        return 1
    fi

    printf "sudo apt install -y $1\n" >> $LOG
    printf "sudo apt install -y $2\n" >> $ERR
    echo $password | sudo -S apt install -y $1 >> $LOG 2>> $ERR
    exit_code=$?
    echo_success $exit_code
    return $exit_code
}

pip3_install() {
    printf "pip3 install $1... "
    printf "\n\n\npip3 install $1\n" >> $LOG
    printf "\n\n\npip3 install $1\n" >> $ERR
    printf "sudo /usr/bin/python3 -m pip install $1\n" >> $LOG
    printf "sudo /usr/bin/python3 -m pip install $1\n" >> $ERR
    echo $password | sudo -S /usr/bin/python3 -m pip install $1 >> $LOG 2>> $ERR
    exit_code=$?
    echo_success $exit_code
    return $exit_code
}

systemctl_create() {
    printf "creating $1 service... "
    printf "\n\n\ncreating $1 service...\n" >> $LOG
    printf "\n\n\ncreating $1 service...\n" >> $ERR
    source=$HOME/.install/services/$1.service
    target=$(head -6 $source | tail -1 | sed 's/#\ *TARGET:\ *//g')

    echo $password | sudo -S systemctl daemon-reload
    echo "# NOTE: THIS FILE WAS AUTO-GENERATED BY $HOME/.install/arch_install" | sudo tee $target > /dev/null 2>> $ERR
    echo "# AND WILL PROBABLY BE OVERWRITTEN IN THE FUTURE." | sudo tee -a $target > /dev/null 2>> $ERR
    echo "# EDIT THE SOURCE FILE AT $source" | sudo tee -a $target > /dev/null 2>> $ERR
    echo "# and run $HOME/.install/arch_install again to install it here." | sudo tee -a $target > /dev/null 2>> $ERR
    echo "" | sudo tee -a $target > /dev/null 2>> $ERR
    tail --lines=+7 $source | sed 's|{USER}|'$USER'|g' | sed 's|{HOME}|'$HOME'|g' | sudo tee -a $target > /dev/null 2>> $ERR
    exit_code=$?
    echo $password | sudo -S systemctl daemon-reload
    echo_success $exit_code
    return $exit_code
}

systemctl_enable() {
    printf "enabling $1 service... "
    printf "\n\n\nenabling $1 service...\n" >> $LOG
    printf "\n\n\nenabling $1 service...\n" >> $ERR
    printf "sudo systemctl enable $1\n" >> $LOG
    printf "sudo systemctl enable $1\n" >> $ERR
    echo $password | sudo -S systemctl enable "$1" >> $LOG 2>> $ERR
    exit_code=$?
    echo_success $exit_code
    return $exit_code
}

link() {
    [ ! -z $3 ] && printf "link: too many arguments" && return 1
    printf "link $1 to $2... "
    printf "\n\n\nlink $1 to $2\n" >> $LOG
    printf "\n\n\nlink $1 to $2\n" >> $ERR
    printf "sudo ln -sf $1 $2\n" >> $LOG
    printf "sudo ln -sf $1 $2\n" >> $ERR
    [ -f "$2" ] && echo $password | sudo -S mv $2 $2.bak  >> $LOG 2>> $ERR
    echo $password | sudo -S ln -sf $1 $2  >> $LOG 2>> $ERR
    exit_code=$?
    echo_success $exit_code
    return $exit_code
}


## Install and configure packages
#-------------------------------------------------------------------------------

## build tools
apt_install wget
apt_install ca-certificates
apt_install git
apt_install make
apt_install cmake
apt_install build-essential
# zip
apt_install zip
# unzip
apt_install unzip
# copying and pasting from the terminal
apt_install xclip
# Process monitoring
apt_install htop
# Whois information
apt_install whois
# File conversion
apt_install pandoc
apt_install nodejs
node package manager
apt_install zsh
apt_install tcsh
# Package manager installer
apt_install snapd